---
description:
globs:
alwaysApply: true
---

## 全体的なルール
全領域のコードにはtypescriptを使用する。
frontendには最新バージョンのvue.jsを使用する。
backendには最新バージョンのnest.jsを使用する。

こちらから指定がない限り応答をまたずにすべてのコードを生成する。
関数にはfunctionを使わずにアロー関数を使用する事。

## backend
パッケージ管理にはpnpmを使用する
apiディレクトリ内にコードを書く
バックエンドファーストでnestjs/swaggerでopenapi定義を作成する。
コントローラーの肥大化を避けるために1コントローラー1ルートとする。
コントローラーの役割はあくまでデータを入口と返却のみ。メインロジックはusecase層に切り出す。

## frontend
パッケージ管理にはpnpmを使用する
webディレクトリ内にコードを書く。
コンポーネントがどのコンポーネントで使用されているか視覚的に把握しやすくするために、親子関係のあるコンポーネントは親子を階層的なディレクトリで管理する。
複数画面で共通で使用するコンポーネントに関してはcommonディレクトリ内に配置する。
コンポーネントは基本プレゼンテーション層として扱い、ロジックはコンポーネントと同一階層に適切な粒度のモジュールに切り出して呼び出す。
複数のコンポーネントで使用する共通処理に関しては共通用のディレクトリに配置する。
apiの呼び出しにはopenapi定義から生成したクライアントを使用する。

## infra
パッケージ管理にはnpmを使用する
infraディレクトリ内にコードを書く
infra構成の変更時にクロススタック参照を防止するためにスタックの数は可能な限り少なくする。
仕様的に問題がない限りL3, L2, L1コンストラクタの順で使用する。
アーキテクチャはサーバーレス方向に寄せてメンテナンスコストと維持コストを下げる。